name: Build & Push OCI Image to OCI Image Registry

on:
  workflow_call:
    inputs:
      workdirs:
        required: true
        type: string
      images:
        required: true
        type: string
    secrets:
      docker-hub-username:
        required: true
      docker-hub-access-token:
        required: true
      ghcr-username:
        required: true
      ghcr-access-token:
        required: true

permissions:
  contents: read
  packages: write

jobs:
  build:
    strategy:
      matrix:
        workdir: ${{ fromJSON(inputs.workdirs) }}

    runs-on: ubuntu-latest

    steps:
      - name: Check Out Repository
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3.0.2

      - name: Set up QEMU for Docker Buildx
        uses: docker/setup-qemu-action@27d0a4f181a40b142cce983c5393082c365d1480 # tag=v1.2.0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@94ab11c41e45d028884a99163086648e898eed25 # tag=v1.6.0

      - name: Set up Node.js for extracting recipe from Dockerfile
        uses: actions/setup-node@56337c425554a6be30cdef71bf441f15be286854 # tag=v3.1.1

      - name: Extract recipe from Dockerfile
        id: recipe
        run: |
          TAGS=`npm exec -sy @hazmi35/extract-docker-baseimg-recipe ${{ matrix.workdir }}/Dockerfile tags`
          PLATFORMS=`npm exec -sy @hazmi35/extract-docker-baseimg-recipe ${{ matrix.workdir }}/Dockerfile platforms`
          VARIANT=`npm exec -sy @hazmi35/extract-docker-baseimg-recipe ${{ matrix.workdir }}/Dockerfile variant`
          echo TAGS: $TAGS
          echo PLATFORMS: $PLATFORMS
          echo VARIANT: $VARIANT
          echo "::set-output name=tags::${TAGS//$', '/'%0A'}"
          echo "::set-output name=platforms::${PLATFORMS//$', '/'%0A'}"
          echo "::set-output name=variant::$VARIANT"

      - name: Generate Docker image metadata
        uses: docker/metadata-action@f2a13332ac1ce8c0a71aeac48a150dbb1838ab67 # tag=v3.7.0
        id: meta
        with:
          images: ${{ inputs.images }}
          tags: |
            ${{ steps.recipe.outputs.tags }}

      - name: Login to Docker Hub
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@dd4fa0671be5250ee6f50aedf4cb05514abda2c7 # tag=v1.14.1
        with:
          registry: docker.io
          username: ${{ secrets.docker-hub-username }}
          password: ${{ secrets.docker-hub-access-token }}

      - name: Login to GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@dd4fa0671be5250ee6f50aedf4cb05514abda2c7 # tag=v1.14.1
        with:
          registry: ghcr.io
          username: ${{ secrets.ghcr-username }}
          password: ${{ secrets.ghcr-access-token }}

      - name: Build and push the Docker image from the specified Dockerfile
        id: docker_build
        uses: docker/build-push-action@e551b19e49efd4e98792db7592c17c09b89db8d8 # tag=v3.0.0
        with:
          context: ${{ matrix.workdir }}
          platforms: |
            ${{ steps.recipe.outputs.platforms }}
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Well, turns out it doesn't support PAT yet. Please see https://github.com/peter-evans/dockerhub-description/issues/24 and https://github.com/docker/roadmap/issues/115
      #- name: Update repo description
      #  uses: peter-evans/dockerhub-description@v2.4.1
      #  with:
      #    username: ${{ secrets.docker-hub-username }}
      #    password: ${{ secrets.docker-hub-username }}
      #    repository: TO BE FILLED
